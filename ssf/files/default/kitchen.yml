# -*- coding: utf-8 -*-
# vim: ft=yaml
---
{#- {%- from tplroot ~ "/libcontext.jinja" import format_context, format_kwargs, format_list with context %} #}
{%- macro format_matcher(matcher_parent, width=10) %}
{%-   filter indent(width) %}
{%-     for mp in matcher_parent %}
{%-       for matcher, matcher_specs in mp.items() %}
'{{ matcher }}':
{%-         for matcher_child in matcher_specs %}
{%-           if matcher_child == '.' %}
{%-             set matcher_child = semrel_formula %}
{%-           elif matcher_child.startswith('.') %}
{%-             set matcher_child = semrel_formula ~ matcher_child %}
{%-           endif %}
  - {{ matcher_child }}
{%-         endfor %}
{%-       endfor %}
{%-     endfor %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_includes_excludes(suite, clude_type) %}
{%-   filter indent(4) %}
{%-     set cludes = suite[clude_type] %}
{%-     if cludes %}
{{ clude_type }}:
{#-       Centralise duplication from here and `libcimatrix.jinja` #}
{%-       for platform in cludes %}
{%-         set os       = platform[0] | d('') %}
{%-         set os_ver   = platform[1] | d('') %}
{%-         set salt_ver = platform[2] | d('') %}
{%-         set py_ver   = platform[3] | d('') %}
{#-         Concatenate the `INSTANCE` or set to `NONE` otherwise #}
{%-         if not platform %}
{%-           set instance = 'NONE' %}
{%-         else %}
{%-           set instance = '{0}-{1}-{2}-py{3}'.format(
                os | replace('/', '-'),
                os_ver | replace('.', ''),
                salt_ver | replace('.', '-'),
                py_ver,
              ) %}
{%-         endif %}
  - {{ instance }}
{%-       endfor %}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_image(os, os_ver, salt_ver, py_ver) %}
{%-   filter indent(6) %}
{%-     if os == 'opensuse/leap' %}
image: {{ os }}:{{ os_ver }}
{%-     else %}
image: netmanagers/salt-{{ salt_ver }}-py{{ py_ver }}:{{ os | replace('/', '-') }}-{{ os_ver }}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_prov_cmds(os, os_ver, salt_ver, py_ver) %}
{#-   TODO: Should really do this whole `if` block from `defaults.yaml` or `formulas.yaml`, just speeding things up right now #}
{#-         Need to look at if this can be resolved from within the formulas themselves, though                               #}
{%-   filter indent(6) %}
{%-     set prov_cmds = [] %}
{#-     Specific to unsalted `opensuse/leap` #}
{%-     if os == 'opensuse/leap' %}
{%-       do prov_cmds.append('# yamllint disable-line rule:line-length') %}
{%-       do prov_cmds.append(
            '- zypper install -y glibc-locale net-tools net-tools-deprecated python-xml python{0}-pip'.format(py_ver)
          ) %}
{%-       do prov_cmds.append('- systemctl enable sshd.service') %}
{%-     endif %}
{#-     Specific to `master` #}
{%-     if salt_ver == 'master' %}
{%-       if os != 'opensuse/leap' %}
{%-         do prov_cmds.append('- curl -o bootstrap-salt.sh -L https://bootstrap.saltstack.com') %}
{%-         do prov_cmds.append('- sh bootstrap-salt.sh -XdPbfrq -x python{0} git {1}'.format(py_ver, salt_ver)) %}
{%-       endif %}
{%-       if semrel_formula == 'deepsea' %}
{%-         if os in ['centos', 'fedora'] %}
{%-           do prov_cmds.append('- yum install make -y') %}
{%-         endif %}
{%-       elif semrel_formula == 'golang' %}
{%-         if os in ['debian', 'ubuntu'] %}
{%-           do prov_cmds.append('# https://github.com/saltstack/salt/issues/39314') %}
{%-           do prov_cmds.append('- apt-get remove python-boto3 -y') %}
{%-         elif os == 'opensuse/leap' %}
{%-           do prov_cmds.append('# https://github.com/saltstack/salt/issues/39314') %}
{%-           do prov_cmds.append('- zypper rm python-boto3 -y') %}
{%-         endif %}
{%-       endif %}
{%-     endif %}
{#-     General for all Salt versions #}
{%-     if semrel_formula == 'deepsea' %}
{%-       if os == 'opensuse/leap' %}
{%-         do prov_cmds.append('- zypper -n in tar gzip') %}
{%-       endif %}
{%-     endif %}
{#-     Prepare the commands if available#}
{%-     if prov_cmds %}
provision_command:
{%-       for prov_cmd in prov_cmds %}
  {{ prov_cmd }}
{%-       endfor %}
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}

{%- macro format_driver_run_cmds(os, os_ver) %}
{%-   filter indent(6) %}
{%-     if os in ['opensuse/leap', 'arch-base'] %}
run_command: /usr/lib/systemd/systemd
{%-     elif [os, os_ver] == ['centos', 6] %}
run_command: /sbin/init
{%-     endif %}
{%-   endfilter %}
{%- endmacro %}
# For help on this file's format, see https://kitchen.ci/
driver:
  name: docker
  use_sudo: false
  privileged: true
  run_command: /lib/systemd/systemd

# Make sure the platforms listed below match up with
# the `env.matrix` instances defined in `.travis.yml`
platforms:
{#- TODO: Replace this with new `amazonlinux` (but really need an `upstart`-based replacement) #}
{#-       Get rid off `first_linebreak` then as well #}
{%- set first_linebreak = '' %}
{%- if semrel_formula == 'vault' %}
  {%- set first_linebreak = '\n' %}
  - name: amazonlinux
    driver:
      image: amazonlinux:1
      platform: rhel
      run_command: /sbin/init
      provision_command:
        # install latest stable Salt
        - curl -L https://bootstrap.saltstack.com | sh -s -- -X
{%- endif %}
{#- Centralise duplication from here and `libcimatrix.jinja` #}
{%- set prev_comment = '' %}
{%- for platform in platforms %}
{%-   set os       = platform[0] %}
{%-   set os_ver   = platform[1] %}
{%-   set salt_ver = platform[2] %}
{%-   set py_ver   = platform[3] %}
{#-   Display comment for each section (based on Salt version) #}
{%-   set linebreak = '\n' %}
{%-   set comment = '`{0}`'.format(salt_ver) %}
{%-   if loop.index0 == 0 %}
{%-     set linebreak = first_linebreak %}
{%-   endif %}
{%-   if prev_comment != comment %}
{{ linebreak }}  ## SALT {{ comment }}
{%-     set prev_comment = comment %}
{%-   endif %}
{#-   TODO: Should really do this `if` from `defaults.yaml` or `formulas.yaml`, just speeding things up right now #}
{%-   if os == 'centos' and os_ver == 6 and semrel_formula == 'libvirt' %}
  # Python2 version problem
  # SaltStack runs under python 2.7 but system is python 2.6
  # The python libvirt library can't be used
  # - name: centos-6-2017-7-py2
  #   driver:
  #     image: netmanagers/salt-2017.7-py2:centos-6
  #     run_command: /sbin/init
{%-   else %}
  - name: {{ os | replace('/', '-') }}-{{ os_ver | replace('.', '') }}-{{ salt_ver | replace('.', '-') }}-py{{ py_ver }}
    driver:
      {{- format_driver_image(os, os_ver, salt_ver, py_ver) }}
      {{- format_driver_prov_cmds(os, os_ver, salt_ver, py_ver) }}
      {{- format_driver_run_cmds(os, os_ver) }}
    {%- if [os, os_ver] == ['opensuse/leap', 15] %}
    provisioner:
      salt_bootstrap_options: -XdPfrq -x python{{ py_ver }} git {{ salt_ver }}
      salt_install: bootstrap
    # Workaround to avoid intermittent failures on `opensuse-leap-15`:
    # => SCP did not finish successfully (255):  (Net::SCP::Error)
    transport:
      max_ssh_sessions: 1
    {%- endif %}
{%-   endif %}
{%- endfor %}

provisioner:
  name: salt_solo
  log_level: debug
  salt_install: none
  require_chef: false
  formula: {{ semrel_formula }}
  salt_copy_filter:
    - .kitchen
    - .git

verifier:
  # https://www.inspec.io/
  name: inspec
  sudo: true
  # cli, documentation, html, progress, json, json-min, json-rspec, junit
  reporter:
    - cli

suites:
  {%- for index in range(0, inspec_suites_kitchen | length) %}
  {%-   set suite = inspec_suites_kitchen[index] %}
  {#-   Only include the suite if the `suite.name` is set #}
  {#-   Furthermore, do not include if `includes: *includes_NONE` has been set #}
  {%-   if suite.name and not (suite.includes and not suite.includes[0]) %}
  - name: {{ suite.name }}
    {{- format_includes_excludes(suite, 'excludes') }}
    {{- format_includes_excludes(suite, 'includes') }}
    provisioner:
      state_top:
        base:
          {{- format_matcher(suite.provisioner.state_top) }}
      pillars:
        top.sls:
          base:
            {{- format_matcher(suite.provisioner.pillars, width=12) }}
      {#- pillars_from_files #}
      {%- set pillars_from_files = suite.provisioner.pillars_from_files %}
      {%- if pillars_from_files %}
      pillars_from_files:
        {%- for pff in pillars_from_files %}
        {%-   for k, v in pff.items() %}
        {%-     if k.startswith('.') %}
        {%-       set k = semrel_formula ~ k %}
        {%-     endif %}
        {{ k }}: {{ v }}
        {%-   endfor %}
        {%- endfor %}
      {%- endif %}
      {#- dependencies #}
      {#- Centralise duplication from here and `inspec.yml` #}
      {%- set dependencies = suite.provisioner.dependencies %}
      {%- if dependencies %}
      dependencies:
        {%- for dependency in dependencies %}
        - name: {{ dependency.name }}
        {%-   for k, v in dependency.items() %}
        {%-     if k != 'name' %}
          {{ k }}: {{ v }}
        {%-     endif %}
        {%-   endfor %}
        {%- endfor %}
      {%- endif %}
    verifier:
      inspec_tests:
        {%- set inspec_tests_path_prefix = suite.verifier.inspec_tests_path_prefix %}
        {%- set test_suite = suite.verifier.test_suite %}
        {%- if test_suite == '.' %}
        {%-   set test_suite = suite.name %}
        {%- endif %}
        - path: {{ inspec_tests_path_prefix }}/{{ test_suite }}
  {%-   endif %}
  {%- endfor %}
